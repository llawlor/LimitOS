<script>

  // set the device id
  var device_id = '<%= @master_device.id %>';
  // set the auth token
  var device_auth_token = '<%= @master_device.auth_token %>';
  // set the i2c address
  var device_i2c_address = '<%= @device.i2c_address %>';
  // set the video url
  var video_server_url = '<%= @device.video_to_clients_url %>';
  // set the url for browser microphone input
  var audio_input_url = '<%= @device.broadcast_to_device_or_self.audio_input_url(true) %>';
  // set the audio output url
  var audio_output_url = '<%= @device.audio_output_url %>';

  <% @device.analog_pins.each do |pin| %>
    // initialize this slider
    var slider_<%= pin.pin_number %> = new Slider("#slider_<%= pin.pin_number %>", {
      tooltip: 'hide'
    });
  <% end %>

  // when the document is ready
  $(document).ready(function() {

    <% @device.analog_pins.each do |pin| %>
      // when the slider is moved
      slider_<%= pin.pin_number %>.on('change', function() {
        // get the slider value
        var slider_value = slider_<%= pin.pin_number %>.getValue();
        // update the text input
        $('#servo_input_' + <%= pin.pin_number %>).val(slider_value);
        // send the value via the master device
        sendServoMessage({ i2c_address: device_i2c_address, pin: <%= pin.pin_number %>, servo: slider_value });
      });

      // when the servo form is submitted
      $('#servo_form_<%= pin.pin_number %>').submit(function() {
        // get the input value
        var input_value = $('#servo_input_' + <%= pin.pin_number %>).val();
        // update the slider value
        slider_<%= pin.pin_number %>.setValue(input_value);
        // send the value via the master device
        sendServoMessage({ i2c_address: device_i2c_address, pin: <%= pin.pin_number %>, servo: input_value });
        // don't reload the page
        return false;
      });
    <% end %>

  });

  // log the data
  function logData(data) {
    // if we've sent a message from the webpage
    if (start_transmission_time !== 0) {
      // calculate the delay
      $('#delay').text(((new Date).getTime() - start_transmission_time) + 'ms');
    }

    // get the data as a string
    var data_string = JSON.stringify(data);
    // update the status
    $('#device_status').text(data_string);

    // if we should log commands
    if ($('#log_commands_checkbox').is(':checked')) {
      // show the logs
      $('#device_logs').removeClass('hide');
      // prepend the data to the existing text
      var log_string = data_string + "\n" + $('#device_logs').text();
      // limit the string to 100 lines of data
      log_string = log_string.split("\n").slice(0, 100).join("\n");
      // log the data
      $('#device_logs').text(log_string);
    }

    // if this is a digital command
    if (data.digital) {
      // remove the active class
      $('.pin_' + data.pin + '_buttons').removeClass('active');
      // blur the buttons in case they're focused
      $('.pin_' + data.pin + '_buttons').blur();
      // make the appropriate button active
      $('#pin_' + data.pin + '_' + data.digital).addClass('active');
    // else if this is a servo command
    } else if (data.servo) {
      // update the slider value
      window['slider_' + data.pin].setValue(data.servo);
      // update the text input
      $('#servo_input_' + data.pin).val(data.servo);
    }

    // if this is a command to stop the rpi microphone
    if (data.digital && (data.pin == <%= @device.audio_start_pin || 0 %>) && (data.digital === 'off')) {
      // reset the browser speakers
      resetBrowserSpeakers();
    }
  }

</script>
